
# Netflix Clone - مشروع استنساخ نتفليكس

## السياق: هذا المشروع تم تطويره بواسطة AI Agent
هذا مشروع Netflix Clone تم إنشاؤه وتطويره بالكامل باستخدام Replit AI Agent. المشروع يحاكي تطبيق Netflix الأصلي مع جميع الميزات الأساسية والتفاعلية.

## وصف المشروع
مشروع Netflix Clone متكامل مبني بـ Next.js 13 و TypeScript مع Firebase وGoogle Authentication. يوفر تجربة مشاهدة شاملة مع إمكانيات البحث والمفضلة والتفاصيل الكاملة للأفلام والمسلسلات.

## التقنيات والحزم المستخدمة
```json
{
  "frontend": ["Next.js 13.1.1", "React 18.2.0", "TypeScript 4.9.4"],
  "styling": ["Tailwind CSS 3.2.4", "Framer Motion 8.0.2", "Tailwind Scrollbar"],
  "authentication": ["NextAuth.js 4.18.7", "Google OAuth"],
  "database": ["Firebase 9.15.0", "Firestore"],
  "apis": ["TMDB API", "React Player 2.11.0"],
  "icons": ["React Icons 4.7.1"],
  "tools": ["PostCSS", "Autoprefixer"]
}
```

## هيكل الملفات والمجلدات
```
├── pages/
│   ├── index.tsx           # الصفحة الرئيسية - عرض الأفلام
│   ├── tv.tsx             # صفحة المسلسلات التلفزيونية
│   ├── about.tsx          # صفحة حول المشروع
│   ├── favourite.tsx      # صفحة المفضلة للمستخدم
│   ├── people.tsx         # صفحة المشاهير والممثلين
│   ├── details/[id].tsx   # صفحة تفاصيل الفيلم/المسلسل
│   ├── cast/[id].tsx      # صفحة تفاصيل الممثل
│   ├── season/[id].tsx    # صفحة تفاصيل الموسم
│   └── api/
│       ├── auth/[...nextauth].ts  # NextAuth API
│       └── hello.ts       # API تجريبي

├── components/
│   ├── MainPage.tsx       # المكون الرئيسي للصفحة الأولى
│   ├── Navbar.tsx         # شريط التنقل مع البحث
│   ├── SignIn.tsx         # صفحة تسجيل الدخول
│   ├── HomeBanner.tsx     # البانر الرئيسي المتحرك
│   ├── Row.tsx           # صفوف الأفلام والمسلسلات
│   ├── DetailsFeed.tsx    # عرض تفاصيل المحتوى
│   ├── Trailer.tsx        # عرض التريلرات
│   ├── BilledCast.tsx     # عرض طاقم التمثيل
│   ├── Search.tsx         # مكون البحث المتقدم
│   ├── AddBookmark.tsx    # إضافة للمفضلة
│   └── [30+ مكون إضافي]

├── components/SeasonPage/
│   ├── SeasonDetails.tsx  # تفاصيل الموسم
│   ├── Episodes.tsx       # عرض الحلقات
│   ├── SeasonFeed.tsx     # تغذية الموسم
│   └── SeasonTrailer.tsx  # تريلر الموسم

├── components/person/
│   ├── PersonBanner.tsx   # بانر الشخص
│   ├── PersonFeed.tsx     # معلومات الشخص
│   ├── KnownFor.tsx       # الأعمال المعروفة
│   └── PeoplePopular.tsx  # الأشخاص الشائعون

├── components/skeleton/
│   ├── BannerSkeleton.tsx # هيكل تحميل البانر
│   ├── ImageSkelten.tsx   # هيكل تحميل الصور
│   └── TrailerSkeleton.tsx # هيكل تحميل التريلر

├── utils/
│   ├── requests.ts        # طلبات TMDB API للأفلام
│   ├── personRequest.ts   # طلبات TMDB API للأشخاص
│   ├── tvSeasonRequest.ts # طلبات TMDB API للمواسم
│   └── baseUrl.tsx        # قاعدة بيانات الصور

├── firebase/
│   └── firebase.ts        # إعداد Firebase

└── styles/
    └── globals.css        # التنسيقات العامة
```

## الميزات الوظيفية المطبقة

### 1. نظام المصادقة الآمن
- **Google OAuth** باستخدام NextAuth.js v4
- **حماية الصفحات** - يتطلب تسجيل دخول
- **إدارة الجلسات** الآمنة
- **صفحة تسجيل دخول** مخصصة بتصميم Netflix

### 2. عرض المحتوى التفاعلي
- **البانر الرئيسي** مع تشغيل تلقائي للتريلرات
- **صفوف متعددة** للأفلام (شائع، جديد، أكشن، كوميديا، رعب، إلخ)
- **المسلسلات التلفزيونية** مع المواسم والحلقات
- **تشغيل التريلرات** في نوافذ منبثقة
- **التمرير الأفقي** السلس للأفلام

### 3. صفحات التفاصيل الشاملة
- **معلومات كاملة** للأفلام والمسلسلات
- **طاقم التمثيل** مع الصور والأدوار
- **التقييمات والتواريخ** من TMDB
- **الأنواع والمدة** والمعلومات الإضافية
- **الأفلام المشابهة** والتوصيات

### 4. نظام البحث المتقدم
- **بحث فوري** في الأفلام والمسلسلات
- **نتائج ديناميكية** أثناء الكتابة
- **تصفح حسب الفئات** والأنواع
- **صفحة المشاهير** مع تفاصيل شخصية

### 5. نظام المفضلة والإشارات المرجعية
- **إضافة للمفضلة** مع Firebase Firestore
- **صفحة المفضلة الشخصية** لكل مستخدم
- **حفظ الإشارات المرجعية** بشكل دائم
- **إدارة المحتوى المحفوظ**

## متغيرات البيئة المطلوبة (.env.local)
```env
# TMDB API
NEXT_PUBLIC_API_KEY=your_tmdb_api_key

# Google OAuth
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# NextAuth
NEXT_PUBLIC_SECRET=your_nextauth_secret
NEXT_PUBLIC_AUTH_URL=http://localhost:3000
NEXTAUTH_URL=http://localhost:3000

# Firebase Configuration
NEXT_PUBLIC_FIREBASE_API_KEY=your_firebase_api_key
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
NEXT_PUBLIC_FIREBASE_APP_ID=your_app_id
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=your_measurement_id
```

## أوامر NPM والتشغيل
```bash
# تثبيت التبعيات
npm install

# تشغيل الخادم المحلي (المنفذ 3000)
npm run dev

# بناء للإنتاج
npm run build

# تشغيل النسخة المبنية
npm run start

# فحص الكود
npm run lint
```

## APIs الخارجية المستخدمة
- **TMDB API**: أفلام، مسلسلات، ممثلين، تريلرات، صور
- **Firebase Firestore**: حفظ المفضلة وبيانات المستخدمين
- **Google OAuth**: المصادقة والتسجيل
- **NextAuth**: إدارة الجلسات والأمان

## التوجيه والصفحات (Next.js Routing)
```
/ → الصفحة الرئيسية (الأفلام)
/tv → المسلسلات التلفزيونية
/about → معلومات عن المشروع
/favourite → المفضلة الشخصية
/people → المشاهير والممثلين
/details/[id] → تفاصيل الفيلم/المسلسل
/cast/[id] → تفاصيل الممثل
/season/[id] → تفاصيل الموسم
/api/auth/* → NextAuth endpoints
```

## التصميم والواجهة (UI/UX)
- **تصميم متجاوب** يعمل على جميع الأحجام
- **ألوان Netflix الأصلية** - أسود، أحمر، رمادي
- **حركات Framer Motion** سلسة ومتناسقة
- **تأثيرات Hover** وتفاعل المستخدم
- **Skeleton Screens** أثناء التحميل
- **Tailwind CSS** للتنسيق السريع
- **Icons React Icons** عالية الجودة

## قاعدة البيانات Firebase
```javascript
// هيكل البيانات في Firestore
users: {
  [userId]: {
    bookmarks: [
      {
        id: movieId,
        title: "Movie Title",
        poster_path: "/path/to/poster.jpg",
        media_type: "movie" | "tv",
        timestamp: FirebaseTimestamp
      }
    ]
  }
}
```

## حالة التطوير الحالية
- ✅ **جميع الميزات الأساسية** مطبقة ومختبرة
- ✅ **التصميم المتجاوب** يعمل على جميع الأجهزة
- ✅ **المصادقة والأمان** مكتملة
- ✅ **التكامل مع APIs** فعال
- ✅ **إدارة الحالة** مع React Hooks
- ✅ **التوجيه الديناميكي** مع Next.js

## النشر والاستضافة (Deployment)
```javascript
// next.config.js
module.exports = {
  reactStrictMode: true,
  images: {
    domains: ["image.tmdb.org"]
  }
}

// Replit Configuration
run = "npm run dev"
build = ["npm", "run", "build"]
start = ["npm", "run", "start"]
port = 3000
```

## أولويات التطوير المستقبلي
1. **تحسين الأداء** - تحسين سرعة التحميل
2. **ميزات إضافية** - قوائم مخصصة، تقييمات
3. **تحسين UX** - تجربة مستخدم أفضل
4. **SEO** - تحسين محركات البحث
5. **PWA** - تطبيق ويب تقدمي

---
**ملاحظة للـ AI Agent**: هذا المشروع مكتمل وجاهز للتطوير الإضافي. جميع الملفات والمكونات موثقة ومنظمة. يمكنك التعديل والإضافة عليه بثقة كاملة.
