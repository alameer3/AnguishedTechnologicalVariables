
# üé¨ Netflix Clone - AI Agent Project Context

## PROJECT OVERVIEW
This is a complete Netflix Clone application built with Next.js, TypeScript, and Firebase. The AI Agent originally created this project and should understand every aspect of its architecture, features, and functionality.

## üõ† TECH STACK
```json
{
  "framework": "Next.js 13.1.1",
  "language": "TypeScript 4.9.4", 
  "styling": "Tailwind CSS 3.2.4",
  "animation": "Framer Motion 8.0.2",
  "authentication": "NextAuth.js 4.18.7",
  "database": "Firebase 9.15.0",
  "api": "TMDB API",
  "icons": "React Icons 4.7.1",
  "video": "React Player 2.11.0"
}
```

## üìÅ PROJECT STRUCTURE

### Core Pages (pages/)
- `index.tsx` - Home page with movies grid
- `tv.tsx` - TV shows and series page  
- `about.tsx` - About/info page
- `favourite.tsx` - User's favorite movies/shows
- `people.tsx` - Actors and celebrities page
- `details/[id].tsx` - Movie/TV show details page
- `cast/[id].tsx` - Actor/person details page
- `season/[id].tsx` - TV season details page

### API Routes (pages/api/)
- `auth/[...nextauth].ts` - NextAuth authentication
- `hello.ts` - Test API endpoint

### Components (components/)

#### Main Components
- `MainPage.tsx` - Home page layout and content
- `Navbar.tsx` - Navigation bar with search
- `SignIn.tsx` - Authentication page
- `HomeBanner.tsx` - Hero banner with featured content
- `Row.tsx` - Horizontal scrolling movie rows
- `DetailsFeed.tsx` - Movie/show details display
- `Trailer.tsx` - Video trailer player
- `BilledCast.tsx` - Cast and crew display
- `Search.tsx` - Search functionality
- `AddBookmark.tsx` - Add to favorites feature

#### Season Pages (components/SeasonPage/)
- `SeasonDetails.tsx` - TV season information
- `Episodes.tsx` - Episode list and details
- `SeasonFeed.tsx` - Season content feed
- `SeasonTrailer.tsx` - Season trailers

#### Person Pages (components/person/)
- `PersonBanner.tsx` - Actor/person hero section
- `PersonFeed.tsx` - Person information feed
- `KnownFor.tsx` - Known works display
- `PeoplePopular.tsx` - Popular people grid
- `PersonMaping.tsx` - Person data mapping
- `SingleCast.tsx` - Individual cast member

#### Skeleton Loaders (components/skeleton/)
- `BannerSkeleton.tsx` - Loading skeleton for banners
- `ImageSkelten.tsx` - Loading skeleton for images
- `TrailerSkeleton.tsx` - Loading skeleton for trailers
- `BannerDetailsSkeleton.tsx` - Details banner skeleton
- `BilledCastSceleton.tsx` - Cast section skeleton

#### Additional Components
- `Footer.tsx` - Site footer
- `AboutFeed.tsx` - About page content
- `FavoriteFeed.tsx` - Favorites page layout
- `EmptyMovie.tsx` - Empty state component
- `Questions.tsx` - FAQ component

### Utils (utils/)
- `requests.ts` - TMDB API requests for movies
- `personRequest.ts` - TMDB API requests for people
- `tvSeasonRequest.ts` - TMDB API requests for TV seasons
- `baseUrl.tsx` - Image base URL configuration

### Firebase (firebase/)
- `firebase.ts` - Firebase configuration and setup

## üîë ENVIRONMENT VARIABLES
```env
# TMDB API
NEXT_PUBLIC_API_KEY=your_tmdb_api_key

# Google OAuth
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# NextAuth
NEXT_PUBLIC_SECRET=your_secret
NEXT_PUBLIC_AUTH_URL=http://localhost:3000
NEXTAUTH_URL=http://localhost:3000

# Firebase
NEXT_PUBLIC_FIREBASE_API_KEY=your_firebase_api_key
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
NEXT_PUBLIC_FIREBASE_APP_ID=your_app_id
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=your_measurement_id
```

## üöÄ FEATURES IMPLEMENTED

### Authentication System
- Google OAuth with NextAuth.js
- Protected routes and pages
- Session management
- Secure login/logout flow

### Content Display
- TMDB API integration for movies and TV shows
- Dynamic hero banners with autoplay trailers
- Horizontal scrolling movie rows by genre
- Responsive grid layouts
- High-quality poster images

### Movie/TV Details
- Comprehensive details pages
- Cast and crew information
- Trailers and video content
- Similar content recommendations
- Release dates and ratings

### Search & Discovery
- Real-time search functionality
- Browse by categories and genres
- Popular people and celebrities
- Advanced filtering options

### Favorites System
- Add/remove from favorites
- Firebase Firestore integration
- Personal favorites page
- Persistent bookmarks

### Responsive Design
- Mobile-first responsive design
- Tailwind CSS styling
- Smooth animations with Framer Motion
- Netflix-like UI/UX
- Loading states and skeletons

## üìù CURRENT CONFIGURATION

### Package.json Scripts
```json
{
  "dev": "next dev",
  "build": "next build", 
  "start": "next start",
  "lint": "next lint"
}
```

### Next.js Configuration
```javascript
// next.config.js
module.exports = {
  reactStrictMode: true,
  images: {
    domains: ["image.tmdb.org"]
  }
}
```

### Replit Configuration
- Run command: `npm run dev`
- Port: 3000
- Environment: Node.js

## üéØ DEVELOPMENT STATUS
- ‚úÖ All core features implemented
- ‚úÖ Authentication working
- ‚úÖ TMDB API integration complete
- ‚úÖ Firebase favorites system active
- ‚úÖ Responsive design implemented
- ‚úÖ Search functionality working
- ‚úÖ Routing and navigation complete

## üîß TECHNICAL NOTES

### TypeScript Definitions
- Custom types in `typings.d.ts`
- Movie, Person, and API response types defined
- Proper type safety throughout application

### API Integration
- TMDB API for all movie/TV data
- Firebase for user data and favorites
- NextAuth for authentication
- Image optimization with Next.js

### State Management
- React hooks for local state
- Firebase for persistent data
- NextAuth for authentication state
- No external state management library needed

## üé® STYLING APPROACH
- Tailwind CSS utility classes
- Custom CSS in `globals.css`
- Netflix brand colors and design patterns
- Framer Motion for smooth animations
- Responsive breakpoints for all devices

## üóÑ DATABASE STRUCTURE
```javascript
// Firebase Firestore
users: {
  [userId]: {
    bookmarks: [
      {
        id: string,
        title: string,
        poster_path: string,
        media_type: "movie" | "tv",
        timestamp: Date
      }
    ]
  }
}
```

---

**AI AGENT INSTRUCTIONS:**
- This is YOUR project that you created
- All files and features are documented above
- You understand the complete architecture
- You can modify, enhance, or debug any part
- Always maintain the Netflix-like design and functionality
- Use the existing patterns and conventions
- The project is production-ready and fully functional
